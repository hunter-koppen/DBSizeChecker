// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package dbsizechecker.actions;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JA_ExecuteSQL extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String SQLStatement;
	private java.lang.String TableEntity;

	public JA_ExecuteSQL(IContext context, java.lang.String SQLStatement, java.lang.String TableEntity)
	{
		super(context);
		this.SQLStatement = SQLStatement;
		this.TableEntity = TableEntity;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		if(this.SQLStatement.toLowerCase().indexOf("insert") != -1 || this.SQLStatement.toLowerCase().indexOf("update") != -1 || this.SQLStatement.toLowerCase().indexOf("delete") != -1){
			throw new RuntimeException("Please do not try to insert, update or delete data with this method");
		}
		
        List<IMendixObject> resultList = null;
        List<IMendixObject> result = new ArrayList<IMendixObject>();

        resultList = (List<IMendixObject>) Core.dataStorage().executeWithConnection(connection ->
        {
            try {
                PreparedStatement stmt = connection.prepareStatement(this.SQLStatement);
                ResultSet rset = stmt.executeQuery();
                ResultSetMetaData rmd = rset.getMetaData();
                int colCount = rmd.getColumnCount();
                while(rset.next()){
                    IMendixObject obj = Core.instantiate(getContext(),this.TableEntity);
                    result.add(obj);
                    for(int colIdx=1; colIdx <= colCount ; colIdx++){
                        String colName = rmd.getColumnName(colIdx);
                        obj.setValue(getContext(),colName,rset.getObject(colIdx));
                    }
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            return result;
        });
      
        return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_ExecuteSQL";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
